// Copyright 2016 The Gem Authors. All rights reserved.
// Use of this source code is governed by a MIT license
// that can be found in the LICENSE file.

// Package log implements a simple logging package.
package log

import (
	"fmt"
	"io"
	"log"
	"sync"
)

// These flags define which text to prefix to each log entry generated by the Logger.
// See the standard logging package for details.
const (
	Ldate         = log.Ldate
	Ltime         = log.Ltime
	Lmicroseconds = log.Lmicroseconds
	Llongfile     = log.Llongfile
	Lshortfile    = log.Lshortfile
	LUTC          = log.LUTC
	LstdFlags     = log.LstdFlags
)

// Logging levels.
// LevelAll should not be using with other levels at the same time,
// unless you know what are you doing.
const (
	LevelDebug = 1 << iota
	LevelInfo
	LevelWarning
	LevelError
	LevelFatal

	LevelAll = LevelDebug | LevelInfo | LevelWarning | LevelError | LevelFatal
)

// Level name.
const (
	LevelDebugStr   = "DEBUG"
	LevelInfoStr    = "INFO"
	LevelWarningStr = "WARNING"
	LevelErrorStr   = "ERROR"
	LevelFatalStr   = "FATAL"
)

// Level prefix.
const (
	prefix        = ": "
	prefixDebug   = LevelDebugStr + prefix
	prefixInfo    = LevelInfoStr + prefix
	prefixWarning = LevelWarningStr + prefix
	prefixError   = LevelErrorStr + prefix
	prefixFatal   = LevelFatalStr + prefix
)

// Logger interface.
type Logger interface {
	Debug(v ...interface{})
	Debugf(format string, v ...interface{})
	Debugln(v ...interface{})

	Info(v ...interface{})
	Infof(format string, v ...interface{})
	Infoln(v ...interface{})

	Warning(v ...interface{})
	Warningf(format string, v ...interface{})
	Warningln(v ...interface{})

	Error(v ...interface{})
	Errorf(format string, v ...interface{})
	Errorln(v ...interface{})

	Fatal(v ...interface{})
	Fatalf(format string, v ...interface{})
	Fatalln(v ...interface{})
}

// New returns a StdLogger instance.
func New(out io.Writer, flag, level int) *StdLogger {
	return &StdLogger{
		Logger: log.New(out, "", flag),
		level:  level,
	}
}

// StdLogger an extended edition of log.Logger(standard logging package).
type StdLogger struct {
	*log.Logger
	level int
	mu    sync.Mutex
}

// ignore return bool indicate whether the current level's log should be ignored.
func (l *StdLogger) ignore(level int) bool {
	return (l.level & level) == 0
}

func (l *StdLogger) print(level int, prefix string, v ...interface{}) {
	if !l.ignore(level) {
		l.mu.Lock()
		l.Logger.SetPrefix(prefix)
		l.Output(3, fmt.Sprint(v...))
		l.mu.Unlock()
	}
}

func (l *StdLogger) printf(level int, prefix, format string, v ...interface{}) {
	if !l.ignore(level) {
		l.mu.Lock()
		l.Logger.SetPrefix(prefix)
		l.Output(3, fmt.Sprintf(format, v...))
		l.mu.Unlock()
	}
}

func (l *StdLogger) println(level int, prefix string, v ...interface{}) {
	if !l.ignore(level) {
		l.mu.Lock()
		l.Logger.SetPrefix(prefix)
		l.Output(3, fmt.Sprintln(v...))
		l.mu.Unlock()
	}
}

// Debug implements Logger's Debug function.
func (l *StdLogger) Debug(v ...interface{}) {
	l.print(LevelDebug, prefixDebug, v...)
}

// Debugf implements Logger's Debugf function.
func (l *StdLogger) Debugf(format string, v ...interface{}) {
	l.printf(LevelDebug, prefixDebug, format, v...)
}

// Debugln implements Logger's Debugln function.
func (l *StdLogger) Debugln(v ...interface{}) {
	l.println(LevelDebug, prefixDebug, v...)
}

// Info implements Logger's Info function.
func (l *StdLogger) Info(v ...interface{}) {
	l.print(LevelInfo, prefixInfo, v...)
}

// Infof implements Logger's Infof function.
func (l *StdLogger) Infof(format string, v ...interface{}) {
	l.printf(LevelInfo, prefixInfo, format, v...)
}

// Infoln implements Logger's Infoln function.
func (l *StdLogger) Infoln(v ...interface{}) {
	l.println(LevelInfo, prefixInfo, v...)
}

// Warning implements Logger's Warning function.
func (l *StdLogger) Warning(v ...interface{}) {
	l.print(LevelWarning, prefixWarning, v...)
}

// Warningf implements Logger's Warningf function.
func (l *StdLogger) Warningf(format string, v ...interface{}) {
	l.printf(LevelWarning, prefixWarning, format, v...)
}

// Warningln implements Logger's Warningln function.
func (l *StdLogger) Warningln(v ...interface{}) {
	l.println(LevelWarning, prefixWarning, v...)
}

// Error implements Logger's Error function.
func (l *StdLogger) Error(v ...interface{}) {
	l.print(LevelError, prefixError, v...)
}

// Errorf implements Logger's Errorf function.
func (l *StdLogger) Errorf(format string, v ...interface{}) {
	l.printf(LevelError, prefixError, format, v...)
}

// Errorln implements Logger's Errorln function.
func (l *StdLogger) Errorln(v ...interface{}) {
	l.println(LevelError, prefixError, v...)
}

// Fatal implements Logger's Fatal function.
func (l *StdLogger) Fatal(v ...interface{}) {
	l.print(LevelFatal, prefixFatal, v...)
}

// Fatalf implements Logger's Fatalf function.
func (l *StdLogger) Fatalf(format string, v ...interface{}) {
	l.printf(LevelFatal, prefixFatal, format, v...)
}

// Fatalln implements Logger's Fatalln function.
func (l *StdLogger) Fatalln(v ...interface{}) {
	l.println(LevelFatal, prefixFatal, v...)
}
